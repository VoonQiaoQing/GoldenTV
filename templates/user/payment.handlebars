<style>
	body {
		background: rgb(0, 0, 0)
	}

	#regForm {
		background-color: gold;
		margin: 0px auto;
		font-family: Raleway;
		padding: 40px;
		border-radius: 10px
	}

	#register {
		color: #000000
	}

	h1 {
		text-align: left;
	}

	.details {
		padding: 10px;
		width: 100%;
		font-size: 17px;
		font-family: Raleway;
		border: 1px solid #aaaaaa;
		border-radius: 10px;
		-webkit-appearance: none
	}

	#pay {
		width: 20%
	}

	.tab input:focus {
		border: 1px solid #6a1b9a !important;
		outline: none;
	}


	.tab {
		display: none;
	}




	.all-steps {
		text-align: left;
		margin-top: 70px;
		margin-bottom: 30px;
		width: 60%;
		display: inline-flex;
		justify-content: left;
	}

	.step {
		height: 40px;
		width: 40px;
		margin: 0 2px;
		background-color: #000000;
		border: none;
		border-radius: 20%;
		display: flex;
		justify-content: center;
		align-items: center;
		font-size: 25px;
		color: #fcfcfc;
	}

	.all-steps {
		text-align: left;
		margin-top: 0px;
		margin-bottom: 0px
	}

	.qr {
		position: fixed;
		right: 400px;
		bottom: 340px;
		width: 150px;
		height: 150px;
		text-align: center;
	}
	.img {

		border: 3px solid rgb(0, 0, 0);
	}
	.thanks-message {
		display: none
	}
</style>
<style>
	#hello:hover {
  letter-spacing: 0.8em;
  background-color: gold;
  color: #000000;
  border: 3px solid rgb(0, 0, 0);
}

#hello {
  color: white;
}
button {
    height: 4em;
    width: auto;
    padding: 1.5em auto;
    margin: 1em auto;
    margin-left: 6em;
    left: 10px;
    background-color: #000000;
    border: none;
    border-radius: 15px;
    text-transform: uppercase;
    letter-spacing: 0.5em;
    transition: all 0.2s cubic-bezier(.4,0,.2,1);
}
</style>
<body onload="generate_qr_code(null)">
<div class="container mt-5">
	<div class="row d-flex justify-content-center align-items-center">
		<div class="col-md-8">
			<div id="regForm">
			<div id="qrcode">
				<div class="all-steps" id="all-steps">
					<span class="step"><i class="fa fa-mobile-phone"></i></span>
					<h1>NetsQR</h1>
				</div>
				<div>
					<input type="number" name="amount" id="price" value="{{cents}}" style="display: none;">
					<h3> Room Details</h3>
						<h5> Location: {{room_details.location}}</h5>
						<h5> Time Slot: {{room_details.time}}</h5>
						<h5> Date:   {{room_details.date}}</h5>
						<h5> Room type: {{room_details.roomtype}}</h5>
						<h5> Price: ${{room_details.price}}</h5>
						<p>  ***Pay in 10mins***</p>
						<div class="qr">
							<img src="null" id="qr_code" class="img">
							<h4>Scan To Pay</h4>
						</div>
				</div>
			</div>
			<div id="success">
				<h1 style="font-weight: bold;"> You have successfully Paid</h1>
				<h2 style=" text-decoration: underline;"> Room Details</h2>
				<h5> Location: {{room_details.location}}</h5>
				<h5> Time Slot: {{room_details.time}}</h5>
				<h5> Date: {{room_details.date}}</h5>
				<h5> Room type: {{room_details.roomtype}}</h5>
				<h5> Price: ${{room_details.price}}</h5>
				<a href="/"><button id="hello" >Home</button></a>
				<a href="/ticket/ticketlist"><button id="hello" >My tickets</button></a>
			</div>
			<div id="timeout">
				<h1> Sorry! Time Out. You need to book again!</h1>
				<a href="/"><button id="hello">Home</button></a>
			</div>
			<div id="cancel">
				<h1> Due to some reasons, payment is declined!</h1>
				<h1> Please Book Room Again!</h1>
				<a href="/"><button id="hello">Home</button></a>
			</div>
		</div>
	</div>
<script>
	/**
	 * Make a request to generate the QR code
	 * @param {InputEvent} event
	 **/
	document.getElementById("success").style.display = "none";
	document.getElementById("timeout").style.display = "none";
	document.getElementById("cancel").style.display = "none";
	async function generate_qr_code(event) {
		const response = await fetch("/payment/generate", {
			headers: {
				"Content-Type": "application/json"
			},
			method: "POST",
			body:   JSON.stringify({
				amount: document.getElementById("price").value
			})
		});
		if (response.ok) {
			const content = await response.json();
			preview_qr_code(content.qr_code);

			//	Start auto ping
			setTimeout(ping_transaction_status, 1000, 0, content);
		}
	}
	/**
	 * Displays the QR code
	 * @param {string} qr_code
	 **/
	function preview_qr_code(qr_code) {
		document.getElementById("qr_code").src = `data:image;base64,${qr_code}`;
	}
	/**
	 * Make a HTTP request to query the generated transaction
	 * @param {JSON}   transaction
	 * @param {number} attempt 0 ... N
	 **/
	async function ping_transaction_status(attempt, transaction) {
		if (attempt > 600)
			return void_transaction(transaction);
		try {
			const response = await fetch("/payment/query", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					txn_identifier:   transaction.txn_identifier,
					transaction_date: transaction.transaction_date,
					transaction_time: transaction.transaction_time,
					stan:             transaction.stan,
					amount:           transaction.amount
				})
			});

			if (!response.ok) { throw new Error ("Failed to query transaction"); }
			const content = await response.json();
			const status  = content.status;
			
			switch (status) {
				case 0:
					console.log(`Awaiting for payment: ${attempt}`);
					return setTimeout(ping_transaction_status, 1000, attempt + 1, transaction);
				break;
				case 1: 
					console.log(`Payment succeeded`);
					document.getElementById("qrcode").style.display = "none";
					document.getElementById("success").style.display = "inline";
				break;
				case -1:
					console.log(`Payment cancelled`);
					document.getElementById("qrcode").style.display = "none";
					document.getElementById("cancel").style.display = "inline";
					//	TODO: Hide the qr code, set image to X
				break;
			}
		}
		catch (error) {
			console.error(error);
			console.error(`Failed to ping transaction :${transaction.txn_identifier}`);
		}
	}


	async function void_transaction(transaction) {
		try {
			const response = await fetch("/payment/void", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					txn_identifier:   transaction.txn_identifier,
					transaction_date: transaction.transaction_date,
					transaction_time: transaction.transaction_time,
					stan:             transaction.stan,
					amount:           transaction.amount
				})
			});

			if (!response.ok) { throw new Error ("Failed to void transaction"); }
			const content = await response.json();
			const status  = content.status;
			
			switch (status) {
				case 1:
					console.log(`Transaction cancelled successfully`);
					document.getElementById("qrcode").style.display = "none";
					document.getElementById("timeout").style.display = "inline";
				break;

				default:
					console.log(`No action required`);
				break;
			}
		}
		catch (error) {
			console.error(error);
			console.error(`Failed to void transaction :${transaction.txn_identifier}`);
		}
	}
</script>
</body>